package seniorII;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;

import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.Rect;
import org.opencv.core.Size;
import org.opencv.core.Scalar;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;
import org.opencv.videoio.VideoCapture;

public class DCT {
	
	public static double[][] extractFrames(String videoPath) throws IOException {
		File file = new File(videoPath);
		BufferedImage image = ImageIO.read(file);
		BufferedImage grayscaleImage = convertToGrayscale(image);
		double[][] imageArray = imageToArray(grayscaleImage);
		
		return imageArray;
	} 
	
	public static BufferedImage convertToGrayscale(BufferedImage image) {
		 int width = image.getWidth();
	        int height = image.getHeight();
	        
	        BufferedImage grayscaleImage = new BufferedImage(width, height, BufferedImage.TYPE_BYTE_GRAY);
	        
	        for (int y = 0; y < height; y++) {
	            for (int x = 0; x < width; x++) {
	                Color color = new Color(image.getRGB(x, y));
	                int red = color.getRed();
	                int green = color.getGreen();
	                int blue = color.getBlue();
	                int gray = (int) (0.299 * red + 0.587 * green + 0.114 * blue);
	                int grayValue = new Color(gray, gray, gray).getRGB();
	                grayscaleImage.setRGB(x, y, grayValue);
	            }
	        }
	        
	        return grayscaleImage;
	}
	
	public static double[][] imageToArray(BufferedImage image) {
        int width = image.getWidth();
        int height = image.getHeight();
        double[][] pixelValues = new double[height][width];
        
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                pixelValues[y][x] = (double) (image.getRGB(x, y) & 0xFF); 
            }
        }
        
        return pixelValues;
    }
	
	public static double[][] dct2(double[][] input) {
        int rows = input.length;
        int cols = input[0].length;
        double[][] output = new double[rows][cols];

        double alpha = 1.0 / Math.sqrt(2.0);

        for (int u = 0; u < rows; u++) {
            for (int v = 0; v < cols; v++) {
                double sum = 0.0;
                for (int x = 0; x < rows; x++) {
                    for (int y = 0; y < cols; y++) {
                        double cosX = Math.cos(Math.PI * (u + 0.5) * x / rows);
                        double cosY = Math.cos(Math.PI * (v + 0.5) * y / cols);
                        sum += input[x][y] * cosX * cosY;
                    }
                }

                double coefficient = alpha * ((u == 0) ? 1.0 : Math.sqrt(2.0));
                output[u][v] = coefficient * sum;
            }
        }

        return output;
    }
	
    public static void main(String[] args) throws IOException {

    	String videoPath = "C:\\Users\\salma\\Downloads\\Testing Sample\\01_0001_(10_03_21_20_37_10)_c\\word_0\\5.png";
		
    	double[][] frames = extractFrames(videoPath);
    	
    	double[][] topLeftCorner = new double[45][45];
    	
    	for(int r = 0; r < topLeftCorner.length; r++) 
    		for (int c = 0; c < topLeftCorner[r].length; c ++)
    			topLeftCorner[r][c] = frames[r][c];
    	

    	double[][] output = dct2(topLeftCorner);
    	
    	System.out.println("Output size: " + output.length + "*" + output[0].length + " = " + output.length*output[0].length);
    	
    	System.out.println("DCT2 result:");
        for (int i = 0; i < output.length; i++) {
            for (int j = 0; j < output[i].length; j++) {
                System.out.print(output[i][j] + ", ");
            }
            System.out.println();
        }
    }
}
